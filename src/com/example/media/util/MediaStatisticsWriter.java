package com.example.media.util;

import com.example.media.classes.Playlist;
import com.example.media.classes.Track;
import com.example.media.classes.Video;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –ö–ª–∞—Å-—É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –≤–∏—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏.
 *
 * –°—Ç—É–¥–µ–Ω—Ç–∏ –º–∞—é—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –Ω–∏–∂—á–µ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º:
 * - Stream API
 * - –ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑—ñ–≤
 * - method references
 *
 * –§–æ—Ä–º–∞—Ç –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –º–∞—î –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–∏–º —ñ "–ª—é–¥–∏–Ω–æ—á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º"
 * (–¥–∏–≤. –ø—Ä–∏–∫–ª–∞–¥–∏ —É README.md).
 */
public class MediaStatisticsWriter {

    /**
     * –ó–∞–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º—É–∑–∏—á–Ω–∏—Ö —Ç—Ä–µ–∫–∞—Ö —É —Ñ–∞–π–ª.
     *
     * –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É `tracks_output.txt`:
     * --------------------------------------------
     * Tracks count: <–∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤>
     * Average duration: <—Å–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö> seconds
     *
     * Top 3 tracks by rating:
     * 1. <–Ω–∞–∑–≤–∞ —Ç—Ä–µ–∫—É> (rating <—Ä–µ–π—Ç–∏–Ω–≥>)
     * 2. <–Ω–∞–∑–≤–∞ —Ç—Ä–µ–∫—É> (rating <—Ä–µ–π—Ç–∏–Ω–≥>)
     * 3. <–Ω–∞–∑–≤–∞ —Ç—Ä–µ–∫—É> (rating <—Ä–µ–π—Ç–∏–Ω–≥>)
     *
     * Pop tracks:
     * - <–Ω–∞–∑–≤–∞ —Ç—Ä–µ–∫—É>
     * - <–Ω–∞–∑–≤–∞ —Ç—Ä–µ–∫—É>
     * --------------------------------------------
     *
     * –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
     * - Tracks count ‚Üí –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ
     * - Average duration ‚Üí —Å–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö
     * - Top 3 ‚Üí –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å–ø–∞–¥–∞–Ω–Ω—è–º,
     *   –ø—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É –±—Ä–∞—Ç–∏ –Ω–∞–π–¥–æ–≤—à—ñ
     * - Pop tracks ‚Üí —É—Å—ñ —Ç—Ä–µ–∫–∏, —É —è–∫–∏—Ö –∂–∞–Ω—Ä == "Pop"
     */
    public static void writeTrackStats(Playlist<Track> playlist, String filename) throws IOException {
        List<Track> tracks = playlist.getItems();

        int total = tracks.size();
        double avgDuration = tracks.stream().mapToInt(Track::getDuration).average().orElse(0);

        List<Track> top3 = tracks.stream()
                .sorted(Comparator
                        .comparingInt(Track::getRating)
                        .reversed()
                        .thenComparing(Comparator.comparingInt(Track::getDuration).reversed()))
                .limit(3)
                .collect(Collectors.toList());

        List<Track> popTracks = tracks.stream()
                .filter(t -> t.getGenre().equalsIgnoreCase("Pop"))
                .collect(Collectors.toList());

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
            bw.write("Tracks count: " + total);
            bw.newLine();
            bw.write(String.format("Average duration: %.0f seconds", avgDuration));
            bw.newLine();
            bw.newLine();
            bw.write("Top 3 tracks by rating:");
            bw.newLine();

            int index = 1;
            for (Track t : top3) {
                bw.write(index++ + ". " + t.getTitle() + " (rating " + t.getRating() + ")");
                bw.newLine();
            }

            bw.newLine();
            bw.write("Pop tracks:");
            bw.newLine();
            for (Track t : popTracks) {
                bw.write("- " + t.getTitle());
                bw.newLine();
            }
        } // üîπ ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä–∏–ª–∏ try
    }
        // TODO: –†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ü–µ–π –º–µ—Ç–æ–¥
        // –ü—ñ–¥–∫–∞–∑–∫–∏:
        // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ playlist.getItems().size() –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().mapToInt(Track::getDuration).average() –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().sorted(...).limit(3) –¥–ª—è —Ç–æ–ø-3 –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().filter(t -> t.getGenre().equalsIgnoreCase("Pop")) –¥–ª—è –≤—ñ–¥–±–æ—Ä—É Pop-—Ç—Ä–µ–∫—ñ–≤
        // - –ó–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PrintWriter –∞–±–æ Files.write()


    /**
     * –ó–∞–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ñ–¥–µ–æ —É —Ñ–∞–π–ª.
     *
     * –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É `videos_output.txt`:
     * --------------------------------------------
     * Videos count: <–∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ>
     * Average duration: <—Å–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö> seconds
     *
     * Top 3 videos by views:
     * 1. <–Ω–∞–∑–≤–∞ –≤—ñ–¥–µ–æ> (<–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤> views)
     * 2. <–Ω–∞–∑–≤–∞ –≤—ñ–¥–µ–æ> (<–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤> views)
     * 3. <–Ω–∞–∑–≤–∞ –≤—ñ–¥–µ–æ> (<–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤> views)
     *
     * Education videos:
     * - <–Ω–∞–∑–≤–∞ –≤—ñ–¥–µ–æ>
     * - <–Ω–∞–∑–≤–∞ –≤—ñ–¥–µ–æ>
     * --------------------------------------------
     *
     * –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
     * - Videos count ‚Üí –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ
     * - Average duration ‚Üí —Å–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö
     * - Top 3 ‚Üí –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ views —Å–ø–∞–¥–∞–Ω–Ω—è–º
     * - Education videos ‚Üí —É—Å—ñ –≤—ñ–¥–µ–æ, —É —è–∫–∏—Ö category == "Education"
     */
    public static void writeVideoStats(Playlist<Video> playlist, String filename) throws IOException {
        List<Video> videos = playlist.getItems();

        int total = videos.size();
        double avgDuration = videos.stream().mapToInt(Video::getDuration).average().orElse(0);

        List<Video> top3 = videos.stream()
                .sorted(Comparator.comparingLong(Video::getViews).reversed())                .limit(3)
                .collect(Collectors.toList());
        List<Video> educationVideos = videos.stream().filter(v -> v.getCategory().equalsIgnoreCase("Education")).collect(Collectors.toList());

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
                bw.write("Videos count: " + total);
                bw.newLine();
                bw.write(String.format("Average duration: %.0f seconds", avgDuration));
                bw.newLine();
                bw.newLine();
                bw.write("Top 3 videos by views:");
                bw.newLine();

                int index = 1;
                for (Video v : top3) {
                    bw.write(index++ + ". " + v.getTitle() + " (" + v.getViews() + " views)");
                    bw.newLine();
                }

                bw.newLine();
                bw.write("Education videos:");
                bw.newLine();
                for (Video v : educationVideos) {
                    bw.write("- " + v.getTitle());
                    bw.newLine();
                }
            } // üîπ ‚Üê —ñ —Ç—É—Ç –∑–∞–∫—Ä–∏–ª–∏ try
        }
    }
                // TODO: –†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ü–µ–π –º–µ—Ç–æ–¥
                // –ü—ñ–¥–∫–∞–∑–∫–∏:
                // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ playlist.getItems().size() –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().mapToInt(Video::getDuration).average() –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
                // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().sorted(...).limit(3) –¥–ª—è —Ç–æ–ø-3 –∑–∞ views
                // - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ stream().filter(v -> v.getCategory().equalsIgnoreCase("Education")) –¥–ª—è Education-–≤—ñ–¥–µ–æ
                // - –ó–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PrintWriter –∞–±–æ Files.write()

